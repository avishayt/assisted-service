// Code generated by MockGen. DO NOT EDIT.
// Source: isoutil.go

// Package isoutil is a generated GoMock package.
package isoutil

import (
	gomock "github.com/golang/mock/gomock"
	io "io"
	reflect "reflect"
)

// MockHandler is a mock of Handler interface
type MockHandler struct {
	ctrl     *gomock.Controller
	recorder *MockHandlerMockRecorder
}

// MockHandlerMockRecorder is the mock recorder for MockHandler
type MockHandlerMockRecorder struct {
	mock *MockHandler
}

// NewMockHandler creates a new mock instance
func NewMockHandler(ctrl *gomock.Controller) *MockHandler {
	mock := &MockHandler{ctrl: ctrl}
	mock.recorder = &MockHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHandler) EXPECT() *MockHandlerMockRecorder {
	return m.recorder
}

// Extract mocks base method
func (m *MockHandler) Extract() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Extract")
	ret0, _ := ret[0].(error)
	return ret0
}

// Extract indicates an expected call of Extract
func (mr *MockHandlerMockRecorder) Extract() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Extract", reflect.TypeOf((*MockHandler)(nil).Extract))
}

// Create mocks base method
func (m *MockHandler) Create(size int64, volumeLabel string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", size, volumeLabel)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockHandlerMockRecorder) Create(size, volumeLabel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockHandler)(nil).Create), size, volumeLabel)
}

// ReadFile mocks base method
func (m *MockHandler) ReadFile(filePath string) (io.ReadWriteSeeker, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadFile", filePath)
	ret0, _ := ret[0].(io.ReadWriteSeeker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadFile indicates an expected call of ReadFile
func (mr *MockHandlerMockRecorder) ReadFile(filePath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadFile", reflect.TypeOf((*MockHandler)(nil).ReadFile), filePath)
}

// GetVolumeID mocks base method
func (m *MockHandler) GetVolumeID() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVolumeID")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVolumeID indicates an expected call of GetVolumeID
func (mr *MockHandlerMockRecorder) GetVolumeID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVolumeID", reflect.TypeOf((*MockHandler)(nil).GetVolumeID))
}
