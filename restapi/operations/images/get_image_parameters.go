// Code generated by go-swagger; DO NOT EDIT.

package images

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// NewGetImageParams creates a new GetImageParams object
// no default values defined in spec.
func NewGetImageParams() GetImageParams {

	return GetImageParams{}
}

// GetImageParams contains all the bound params for the get image operation
// typically these are obtained from a http.Request
//
// swagger:parameters GetImage
type GetImageParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*The cluster associated with the image metadata to be retrieved.
	  Required: true
	  In: path
	*/
	ClusterID strfmt.UUID
	/*The image whose metadata should be retrieved.
	  Required: true
	  In: path
	*/
	ImageID strfmt.UUID
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewGetImageParams() beforehand.
func (o *GetImageParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	rClusterID, rhkClusterID, _ := route.Params.GetOK("cluster_id")
	if err := o.bindClusterID(rClusterID, rhkClusterID, route.Formats); err != nil {
		res = append(res, err)
	}

	rImageID, rhkImageID, _ := route.Params.GetOK("image_id")
	if err := o.bindImageID(rImageID, rhkImageID, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindClusterID binds and validates parameter ClusterID from path.
func (o *GetImageParams) bindClusterID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	// Format: uuid
	value, err := formats.Parse("uuid", raw)
	if err != nil {
		return errors.InvalidType("cluster_id", "path", "strfmt.UUID", raw)
	}
	o.ClusterID = *(value.(*strfmt.UUID))

	if err := o.validateClusterID(formats); err != nil {
		return err
	}

	return nil
}

// validateClusterID carries on validations for parameter ClusterID
func (o *GetImageParams) validateClusterID(formats strfmt.Registry) error {

	if err := validate.FormatOf("cluster_id", "path", "uuid", o.ClusterID.String(), formats); err != nil {
		return err
	}
	return nil
}

// bindImageID binds and validates parameter ImageID from path.
func (o *GetImageParams) bindImageID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	// Format: uuid
	value, err := formats.Parse("uuid", raw)
	if err != nil {
		return errors.InvalidType("image_id", "path", "strfmt.UUID", raw)
	}
	o.ImageID = *(value.(*strfmt.UUID))

	if err := o.validateImageID(formats); err != nil {
		return err
	}

	return nil
}

// validateImageID carries on validations for parameter ImageID
func (o *GetImageParams) validateImageID(formats strfmt.Registry) error {

	if err := validate.FormatOf("image_id", "path", "uuid", o.ImageID.String(), formats); err != nil {
		return err
	}
	return nil
}
