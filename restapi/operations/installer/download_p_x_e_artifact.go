// Code generated by go-swagger; DO NOT EDIT.

package installer

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// DownloadPXEArtifactHandlerFunc turns a function with the right signature into a download p x e artifact handler
type DownloadPXEArtifactHandlerFunc func(DownloadPXEArtifactParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DownloadPXEArtifactHandlerFunc) Handle(params DownloadPXEArtifactParams) middleware.Responder {
	return fn(params)
}

// DownloadPXEArtifactHandler interface for that can handle valid download p x e artifact params
type DownloadPXEArtifactHandler interface {
	Handle(DownloadPXEArtifactParams) middleware.Responder
}

// NewDownloadPXEArtifact creates a new http.Handler for the download p x e artifact operation
func NewDownloadPXEArtifact(ctx *middleware.Context, handler DownloadPXEArtifactHandler) *DownloadPXEArtifact {
	return &DownloadPXEArtifact{Context: ctx, Handler: handler}
}

/*DownloadPXEArtifact swagger:route GET /pxe-artifacts installer downloadPXEArtifact

Downloads PXE artifact.

*/
type DownloadPXEArtifact struct {
	Context *middleware.Context
	Handler DownloadPXEArtifactHandler
}

func (o *DownloadPXEArtifact) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewDownloadPXEArtifactParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
